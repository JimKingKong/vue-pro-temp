(window.webpackJsonp=window.webpackJsonp||[]).push([["newstore"],{4112:function(t,e,n){"use strict";n.r(e);var s={name:"Newstore",components:{},mixins:[],props:{msg:{type:String,default:"Newstore"}},data:function(){return{}},computed:{},watch:{},created:function(){},mounted:function(){},methods:{}},a=(n("739b"),n("2877")),o=Object(a.a)(s,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"newstore"},[n("b-title-tag",{attrs:{name:"1.新建页面组件对应的store层"}}),n("p",[t._v("1)页面组件请求后台的数据统一存放到 store 层")]),n("p",[t._v("2)src/store/modules/ 下的目录 和 src/views/ 下的目录,文件夹结构基本一样")]),n("p",[t._v("3)菜单列表页面+列表的详情/新建/编辑页面都公用一个store层来存储数据")]),n("p",[t._v("4)store层存的数据大部分来源于 servce 层从网路获取的")]),n("p",[t._v("5)src/store/modules 下面所有的模块会自动被load-modules.js文件自动加载，最终将这些子模块注册到store中去")]),n("p",[t._v("5)store层的目录结构如下：")]),n("code-h",{attrs:{lang:"json",content:"\n    |   |-- store // 数据存储层\n    |   |   |-- index.js // store的入口文件\n    |   |   |-- load-modules.js // 自动加载modules下所有的子模块\n    |   |   |-- modules // 所有的子模块，目录结构跟src/view/的基本保持一致\n    |   |   |   |-- login // 登录页面存储的数据\n    |   |   |   |   |-- index.js\n    |   |   |   |   `-- types.js\n    |   |   |   |-- main\n    |   |   |   |   |-- example // 案例页面存储的数据\n    |   |   |   |   |   |-- index.js\n    |   |   |   |   |   `-- types.js\n    |   |   |   |   |-- index.js // 全局数据的存储\n    |   |   |   |   `-- types.js\n    |   |   |   `-- register // 中蹙额页面存储的数据\n    |   |   |       |-- index.js\n    |   |   |       `-- type.js\n    |   |   `-- types.js\n  "}}),n("p",[t._v("下面以新建demo页面以及对应detail页面的store层代码：")]),n("b-title-tag",{attrs:{name:"2.新建demo页面以及detail页面的store层"}}),n("p",[t._v("1.新建demo文件夹( src/store/modules/main/demo )")]),n("code-h",{attrs:{lang:"json",content:"\n    |   |-- store\n    |   |   |-- index.js\n    |   |   |-- load-modules.js\n    |   |   |-- modules\n                ......\n    |   |   |   |-- main\n    |   |   |   |   |-- demo // demo 以及 detail页面存储的数据\n    |   |   |   |   |   |-- index.js\n    |   |   |   |   |   `-- types.js\n    |   |   |   |   |-- index.js\n    |   |   |   |   `-- types.js\n    |   |   `-- types.js\n  "}}),n("p",[t._v("2.在demo文件夹下新建index.js( src/store/modules/main/demo/index.js )")]),n("code-h",{attrs:{lang:"js",content:'\n    import Types from "./types.js"\n    import allService from "@/service/load_services.js"\n    import {\n      PaginatonDefaultConfig\n    } from "@/config/index.js"\n    const { demoService } = allService\n    export default {\n      // 1.启用命名空间\n      namespaced: true,\n      // 2.定义状态\n      state: {\n        data: {},\n        list: {},\n        detail: {}\n      },\n      // 3.修改状态\n      mutations: {\n        // 这里的 `state` 对象是模块的局部状态\n        [Types.data](state, payload) {\n          state.data = payload\n        },\n        [Types.list](state, payload) {\n          state.list = payload\n        },\n        [Types.detail](state, payload) {\n          state.detail = payload\n        }\n      },\n      // 4.提交action，来修改状态\n      actions: {\n        async data(context, payload) {\n          const config = {\n            headers: {\n              "Content-Type": "application/json;charset=utf-8"\n            }\n          }\n          const result = await demoService.getData(payload, config)\n          context.commit(Types.data, result.data)\n          return Promise.resolve(result.data)\n        },\n        async list(context, payload) {\n          const config = {\n            headers: {\n              "Content-Type": "application/json;charset=utf-8"\n            }\n          }\n          const result = await demoService.getList(payload, config)\n          context.commit(Types.list, result.data.data)\n          return Promise.resolve(result.data.data)\n        },\n        async detail(context, payload) {\n          const config = {\n          }\n          const result = await demoService.getDetail(payload, config)\n          context.commit(Types.detail, result.data)\n          return Promise.resolve(result.data)\n        }\n      },\n      // 5.获取定义的状态, 通过store.getters获取里面的函数,例如：store.getters.count\n      getters: {\n        // state 是获取局部状态；rootState是获取根状态\n        data(state, getters, rootState, rootGetters) {\n          return state.data\n        },\n        list(state, getters, rootState, rootGetters) {\n          const data = state.list\n          if (data) {\n            return data.content || []\n          } else {\n            return []\n          }\n        },\n        listPaginatonConfig(state, getters, rootState, rootGetters) {\n          const data = state.list\n          if (data) {\n            return {\n              "current-page": data.pageNum + 1, // 当前第几页, 从 1 开始\n              "page-sizes": [10, 20, 30, 40], // 可选择一页显示多少条\n              "page-size": data.pageSize, // 一页显示多少条\n              total: data.totalSize // 总共有多少条\n            }\n          } else {\n            return { ...PaginatonDefaultConfig }\n          }\n        },\n        detail(state, getters, rootState, rootGetters) {\n          return state.list\n        }\n      }\n    }\n    /**\n    *\n        // test global store\n        // 1.获取store的数据\n        this.$store.getters.depts)\n        // 2.分发一个action\n        this.$store.dispatch("depts") // 返回promise对象\n        this.$store.getters.depts)\n\n        // test demo store\n        // 1.获取store的数据\n        this.$store.getters["demo/data"]\n        // 2.分发一个action\n        this.$store.dispatch("demo/data") // 返回promise对象\n        this.$store.getters["demo/data"]\n    */\n\n  '}}),n("p",[t._v("3.在demo文件夹下新建types.js( src/store/modules/main/demo/types.js )")]),n("code-h",{attrs:{lang:"js",content:'\n    export default {\n      data: "data",\n      list: "list",\n      detail: "detail"\n    }\n  '}}),n("p",[t._v("4.demo页面和detail页面对应的store层新建完成（store层是依赖service层，所以一会还要新建对应的service层代码）")])],1)}),[],!1,null,"24089617",null);e.default=o.exports},"739b":function(t,e,n){"use strict";var s=n("fc4e");n.n(s).a},fc4e:function(t,e,n){}}]);