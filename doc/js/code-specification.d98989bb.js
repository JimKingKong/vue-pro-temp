(window.webpackJsonp=window.webpackJsonp||[]).push([["code-specification"],{b34c:function(n,t,e){"use strict";var o=e("bb34");e.n(o).a},bb34:function(n,t,e){},bc6e:function(n,t,e){"use strict";e.r(t);var o={name:"CodeSpecification",components:{},mixins:[],props:{msg:{type:String,default:"CodeSpecification"}},data:function(){return{}},computed:{},watch:{},created:function(){},mounted:function(){},methods:{}},a=(e("b34c"),e("2877")),s=Object(a.a)(o,(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"code-specification"},[e("b-title-tag",{attrs:{name:"1.命名规范"}}),e("br"),e("code-h",{attrs:{lang:"js",content:"\n    1.项目中的文件夹、文件统一使用小写命名。\n      如果有多个单词则使用（-）中划线来连接。建议命名不要超过3个单词\n\n      // 推荐（文件夹、文件）命名\n      button  button-group\n      button.vue button-group.vue findpro-modal.vue\n      asider-menu.js\n      theme-chalk.scss\n      // 不推荐（文件夹、文件）命名\n      Button ButtonGroup\n      Button.vue ButtonGroup.vue find-process-modal.vue\n      AsiderMenu.js\n      asiderMenu.js\n      asider_menu.js\n      ThemeChalk.scss\n      themeChalk.scss\n\n    2.组件名称的命名使用单词首字母大写。\n      如果有多个单词也是每个单词首字母大写。建议命名不要超过3个单词\n\n      Button ButtonGroup FindProModal\n\n    3.新建的组件放到一个目录里面\n      例如：\n\n      button\n        button.vue\n  "}}),e("br"),e("b-title-tag",{attrs:{name:"2.模块定义规范"}}),e("br"),e("code-h",{attrs:{lang:"js",content:'\n    1.basic-comps 独立组件模块，该模块编写的独立组件，该模块的组件不能引用components\n      模块的组件,反过来则可以，并且编写的组件统一在index.js中导出。\n\n      basic-comps\n        button\n          button.vue\n        index.js // 统一导出组件\n\n    2.components 非独立组件模块，该模块编写非独立的组件（组合组件和业务组件）。\n      1）该模块的组件之间能互相引用，引用时直接指定要引用的单个组件\n\n        import Icon from "./icon/icon.vue" // 正确\n        import { Icon } from "@/components/index.js" // 错误\n\n      2）该模块的组件可以引用basic-comps模块的组件，反过来则不行\n\n    2.config 配置模块，该模块提供 index.js 统一导出所有的配置\n\n      config\n        config.mock.js // mock环境的配置\n        config.dev.js // 开发环境的配置\n        config.pro.js // 测试环境的配置\n        config.real.js // 正式部署环境的配置\n        // 上面四个配置默认情况下定义的属性是一样的，只是属性的值不一样\n        index.js 统一导出所有的配置\n\n    3.enum 枚举 推荐的定义方式\n\n      export const Sex = {\n        Man: {\n          value: "男",\n          label: "男",\n          color: BaseStyle.$themeColor,\n          id: ""\n        },\n        Woman: {\n          value: "女",\n          label: "女",\n          color: BaseStyle.$successColor,\n          id: ""\n        }\n      }\n\n    4.mixins 混合模块，该模块提供 index.js 统一导出所有的混合\n      1)如果一个组件使用到多个混合时，注意多个混合之间的属性相同的情况\n       例如：\n\n        button\n          button.vue // 引入了A-mixin.js 和 B-mixin.js, 注意这两个混合之间是否有重复的属性，重复属性会出现覆盖的问题\n\n      2）建议每个混合中的属性都添加 前缀\n\n    5.router,service 和 views 模块\n\n      使用自动加载,这三个模块的目录结构推荐是基本一样\n\n    6.views 模块,建议只编写页面组件\n\n    7.xxx 模块\n\n  '}}),e("br"),e("b-title-tag",{attrs:{name:"3.组件编写规范"}}),e("br"),e("p",[n._v("1.组件模板的规范")]),e("code-h",{attrs:{lang:"html",content:"\n    1.标签的属性必须在单独一行\n    2.v-bind: 和 : 统一使用:\n    3.v-on 和 @ 统一使用@\n    3.模板中引用组件时使用字母小写加 - ,\n      例如：<pascal-case></pascal-case>\n    4.禁止templent上使用this\n    5.规范标签上属性的顺序,并且每要给属性占一行，例如：\n    <pascal-case\n      v-if\n      v-for\n      :class\n      :style\n      :isShow\n      :defalutValue\n      :data\n      :otherAttr\n      @handleXxxClick\n      @handleXxxChange\n      @handleXxxInput\n    >\n    </pascal-case>\n    6.点击事件默认以handle开头,并且放到属性的最后\n\n  "}}),e("p",[n._v("2.组件名的规范 ")]),e("code-h",{attrs:{lang:"js",content:"\n    1.组件名首字母大写\n      Button PascalCase ...\n  "}}),e("p",[n._v("3.组件属性的规范")]),e("code-h",{attrs:{lang:"js",content:'\n    1.组件的属性名使用驼峰命名, 要指定类型和默认值\n      例如：\n      props: {\n        type: {\n          type: String,\n          default: "card"\n        },\n        defaultActiveName: {\n          type: String,\n          default: "first"\n        }\n      },\n  '}}),e("p",[n._v("4.组件生命周期和属性顺序的规范")]),n._v(" 例如： "),e("code-h",{attrs:{lang:"js",content:'\n\n    export default {\n      name: "DemoComp",\n      components: {\n      },\n      mixins: [],\n      props: {\n        msg: {\n          type: String,\n          default: "Demo"\n        }\n      },\n      data: function() {\n        return {\n\n        }\n      },\n      computed: {\n\n      },\n      watch: {\n\n      },\n      created() {\n\n      },\n      mounted() {\n\n      },\n      methods: {\n\n      }\n\n    }\n    <\/script>\n\n  '}}),e("br"),e("b-title-tag",{attrs:{name:"5.编写对话的规范"}}),e("code-h",{attrs:{lang:"html",content:'\n    <user-modal\n      ref="userModal"\n\n      :title="userModalTitle"\n      :treeDatas="treeDatas"\n      :userData="userData"\n      :allRole="allRole"\n\n      width="800px"\n      @handleBtnClick="handleModalClick"\n      >\n    </user-modal>\n  '}}),e("code-h",{attrs:{lang:"json",content:"\n    1.确定对话框的 props 属性有哪些\n    2.对话框需要的数据必须是外部传递进去\n    3.对话框里的事件一定要emit出来\n    4.对话框里要有初始化数据的方法\n    5.对话框里要有重置数据的方法\n  "}}),e("b-title-tag",{attrs:{name:"5.编写页面按钮的规范"}}),e("br"),e("code-h",{attrs:{lang:"js",content:"\n    1.项目里面使用到的按钮建议全部使用:b-button-group 和 b-icon-group 组件\n    2.按钮的配置建议抽取到 page-config 中\n    3.按钮的权限建议抽取到 permissions 中\n  "}}),e("b-title-tag",{attrs:{name:"6.Xxx规范"}}),e("br"),e("code-h",{attrs:{lang:"js",content:"\n    1.\n  "}}),e("b-title-tag",{attrs:{name:"7.Xxx规范"}}),e("br"),e("code-h",{attrs:{lang:"js",content:"\n    1.\n  "}})],1)}),[],!1,null,"5b93e337",null);t.default=s.exports}}]);