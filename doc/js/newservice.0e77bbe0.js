(window.webpackJsonp=window.webpackJsonp||[]).push([["newservice"],{"2d91":function(e,n,t){"use strict";var i=t("c4a2");t.n(i).a},c4a2:function(e,n,t){},f4f3:function(e,n,t){"use strict";t.r(n);var i={name:"Newservice",components:{},mixins:[],props:{msg:{type:String,default:"Newservice"}},data:function(){return{}},computed:{},watch:{},created:function(){},mounted:function(){},methods:{}},s=(t("2d91"),t("2877")),a=Object(s.a)(i,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"newservice"},[t("b-title-tag",{attrs:{name:"1.新建页面组件对应的-service层"}}),t("p",[e._v("1)页面组件请求后台接口的代码写在 service 层")]),t("p",[e._v("2)src/service/ 下的目录 和 src/views/ 下的目录, 文件夹结构基本一样")]),t("p",[e._v("3)菜单列表页面+列表的详情/新建/编辑页面都公用一个store层和一个service层")]),t("p",[e._v("4)servce 层是负责从网路获取的数据的")]),t("p",[e._v("5)src/service/ 下面所有的模块会自动被load_services.js文件自动加载并导出,供store层导入")]),t("p",[e._v("5)service 层的目录结构如下：")]),t("code-h",{attrs:{lang:"js",content:"\n    |   |-- service // 服务层代码\n    |   |   |-- load_services.js // 自动导出所有服务\n    |   |   |-- login\n    |   |   |   `-- index.js\n    |   |   |-- main\n    |   |   |   |-- demo // demo以及detail页面对应的服务层\n    |   |   |   |   `-- index.js\n  "}}),t("p",[e._v("下面以新建demo页面以及对应detail页面的service层代码：")]),t("b-title-tag",{attrs:{name:"2.新建demo页面以及detail页面的service层"}}),t("p",[e._v("1.新建demo文件夹( src/service/main/demo )")]),t("code-h",{attrs:{lang:"json",content:"\n    |   |-- service\n    |   |   |-- load_services.js\n    |   |   |-- login\n    |   |   |   `-- index.js\n    |   |   |-- main\n    |   |   |   |-- demo // demo以及detail页面对应的服务层\n    |   |   |   |   `-- index.js\n  "}}),t("p",[e._v("2.在demo文件夹下新建index.js( src/service/main/demo/index.js )")]),t("code-h",{attrs:{lang:"js",content:'\n\n    import { httpGet, httpPost } from "@/http/index.js"\n\n    export const example_api = {\n      dataUrl: "/home1",\n      listUrl: "/tablelist",\n      detailUrl: "/home1"\n    }\n\n    export default {\n\n      getData: (payload, config) => {\n        return httpPost(example_api.dataUrl, payload, config)\n      },\n      getList: (payload, config) => {\n        return httpPost(example_api.listUrl, payload, config)\n      },\n      getDetail: (payload, config) => {\n        return httpGet(example_api.detailUrl, payload, config)\n      }\n\n    }\n\n  '}}),t("p",[e._v("3.demo页面和detail页面对应的service层新建完成")])],1)}),[],!1,null,"105027d6",null);n.default=a.exports}}]);